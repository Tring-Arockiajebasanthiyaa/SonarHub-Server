# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AnalysisResult {
  message: String!
  success: Boolean!
}

type AuthResponse {
  isAuthenticated: Boolean!
  needsPassword: Boolean!
  token: String
  user: User
}

type Branch {
  dashboardUrl: String
  id: Float!
  name: String!
  repoId: Float!
  repoName: String!
  username: String!
}

type CodeMetrics {
  branch: String
  bugs: Float
  codeSmells: Float
  complexity: Float
  coverage: Float
  createdAt: String!
  debtRatio: Float
  duplicatedLines: Float
  filesCount: Float
  language: String
  linesOfCode: Float
  project: Project!
  qualityGateStatus: String
  reliabilityRating: Float
  repoName: String
  securityRating: Float
  technicalDebt: Float
  u_id: ID!
  username: String
  violations: Float
  vulnerabilities: Float
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type GithubRepo {
  description: String
  html_url: String!
  name: String!
  private: Boolean!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type LocReport {
  analysisDuration: Float
  analysisStatus: String
  languageDistribution: JSONObject!
  lastUpdated: DateTimeISO!
  sonarQubeLines: Float!
  totalLines: Float!
}

type Mutation {
  analyzeSingleRepository(githubUsername: String!, repoName: String!): AnalysisResult!
  createProject(description: String!, overview: String!, result: String!, title: String!): Project!
  forgotPassword(email: String!): String!
  githubAuth: AuthResponse
  handleWebhookEvent(authHeader: String!, projectId: String!, status: String!): Boolean!
  requestGithubAuth(code: String, username: String!): RequestGithubAuthResponse!
  resetPassword(newPassword: String!, token: String!): String!
  sendPasswordChangeEmail(email: String!): String!
  setPassword(email: String!, password: String!): String!
  signIn(email: String!, password: String!): String!
  triggerAnalysis(branchName: String!, prId: Int!, repoName: String!, username: String!): TriggerAnalysisResponse!
  triggerAutomaticAnalysis(githubUsername: String!): String!
  triggerAutomaticPullRequestAnalysis(githubUsername: String!, repoName: String!): String!
}

type Project {
  analysisDuration: Float
  analysisEndTime: DateTimeISO
  analysisStartTime: DateTimeISO
  codeMetrics: [CodeMetrics!]!
  createdAt: String!
  defaultBranch: String
  description: String!
  estimatedLinesOfCode: Float
  githubUrl: String!
  isPrivate: Boolean!
  languageDistribution: JSONObject
  lastAnalysisDate: DateTimeISO
  overview: String
  repoName: String!
  result: String
  sonarIssues: [SonarIssue!]
  title: String!
  u_id: ID!
  updatedAt: String!
  user: User!
  username: String!
}

type ProjectAnalysisResult {
  branches: [Branch!]!
  codeMetrics: [CodeMetrics!]!
  locReport: LocReport
  project: Project!
  sonarIssues: [SonarIssue!]!
}

type PullRequest {
  additions: Float!
  author: String!
  branch: String!
  changedFiles: Float!
  closedAt: DateTimeISO
  comment: String
  createdAt: DateTimeISO!
  deletions: Float!
  githubUsername: String!
  mergedAt: DateTimeISO
  prId: Float!
  state: String!
  title: String!
  u_id: String!
}

type Query {
  checkAuth(onlyStatus: Boolean): AuthResponse
  fetchPrivateRepos(username: String!): [GithubRepo!]!
  getBranchesByUsernameAndRepo(githubUsername: String!, repoName: String!): [Branch!]!
  getProjectAnalysis(branch: String, githubUsername: String!, repoName: String!): ProjectAnalysisResult!
  getProjects: [Project!]!
  getPullRequestsByBranch(branchName: String!, githubUsername: String!, repoName: String!): [PullRequest!]!
  getRepoBranches(githubUsername: String!, repoName: String!): [Branch!]!
  getSignupEmail: String
  getUser(username: String!): User
  getUserActivity(githubUsername: String!): UserActivity
  getUserByEmail(email: String!): User
  getUserRepositories(username: String!): [Repo!]!
}

type Repo {
  id: Float!
  language: String
  name: String!
  owner: User!
  stars: Float!
  totalCommits: Float!
}

type RequestGithubAuthResponse {
  message: String!
  success: Boolean!
  url: String!
}

type SonarIssue {
  author: String
  branch: String!
  component: String!
  createdAt: String!
  debt: String
  effort: String
  flows: String
  hash: String
  key: String!
  line: Float
  message: String!
  project: Project!
  projectVersion: String
  repoName: String
  resolution: String
  rule: String!
  severity: String!
  status: String
  tags: String
  textRange: String
  type: String!
  u_id: ID!
  username: String
}

type TriggerAnalysisResponse {
  message: String!
  success: Boolean!
}

type User {
  avatar: String
  email: String!
  githubAccessToken: String
  githubId: String
  name: String!
  password: String
  u_id: String!
  username: String!
}

type UserActivity {
  commitHistory: [String!]!
  createdAt: DateTimeISO!
  dangerLevel: String!
  earliestRepoCreatedAt: DateTimeISO!
  githubUsername: String!
  issuePercentage: String!
  languagesUsed: [String!]!
  lastActive: DateTimeISO!
  mostRecentlyUpdatedRepo: DateTimeISO!
  mostUsedLanguage: String!
  privateRepoCount: Float!
  publicRepoCount: Float!
  repoCommits: [String!]!
  sonarIssues: String!
  topContributedRepo: String!
  totalCommits: Float!
  totalContributions: Float!
  totalForks: Float!
  totalIssuesClosed: Float!
  totalIssuesOpen: Float!
  totalPullRequests: Float!
  totalRepositories: Float!
  totalStars: Float!
  u_id: String!
  updatedAt: DateTimeISO!
  user: User!
}